generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  role          UserRole  @default(USER)
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  accounts      Account[]
  sessions      Session[]
  links         Link[]

  @@map("users")
}

model Link {
  id        String     @id
  shortId   String     @unique
  clicks    Int        @default(0)
  createdAt DateTime   @default(now())
  userId    String?
  targetUrl String     @map("target_url")
  status    LinkStatus @default(ACTIVE)
  user      User?      @relation(fields: [userId], references: [id])

  @@map("urls")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  createdAt             DateTime
  updatedAt             DateTime  @updatedAt
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id         String    @id
  createdAt  DateTime?
  updatedAt  DateTime? @updatedAt
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model logs {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  num        BigInt?
}

enum UserRole {
  USER
  ADMIN
}

enum LinkStatus {
  ACTIVE
  PAUSED
}
